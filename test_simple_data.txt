First, basic schema validation using schemaish.

We start by defining a schema:

>>> import schemaish
>>> from validatish import validator
>>> schema = schemaish.Structure()
>>> schema.add('url', schemaish.String(
...    validator=validator.URL()))

Register it (in a shonky way):

>>> import transformer
>>> transformer.schema_registry = {'myschema': schema}

Now, here's our sample data that we want to post:

>>> example = {'schema':'myschema',
...            'data':{'url': 3}}

Now validate it; an "errors" dictionary is added to our data structure.

>>> from transformer import get_validated
>>> validated_data = get_validated(example)
>>> from pprint import pprint
>>> pprint(validated_data)
{'data': {'url': 3}, 'errors': {'url': 'must be a url'}, 'schema': 'myschema'}

We can also pass in the schema as a form field:

>>> example = {'data':{'schema':'myschema',
...                    'url': 3}}
>>> get_validated(example) == validated_data
True

Now, create a form template by hand, in which we want to present the data:

>>> form_template = '''
... <html><body><form action="">
... <input type="hidden" name="schema" value="myschema"/>
... <div class="field">
...  <label for="url">URL</label>
...  <div class="error-message"/>
...  <input type="text" name="url"/>
... </div>
... </form></body></html>'''

And we can now render it:

>>> from transformer import ParsedForm
>>> form = ParsedForm(form_template, data=validated_data)

Explictly validate it: 

>>> form.validate()
{'errors': {'url': 'must be a url'}, 'data': {'url': 3}, 'schema': 'myschema'}

A validated form can then be rendered:

>>> result = form.transform()
>>> '<div class="error-message">must be a url</div>' in result
True
>>> '<input type="text" name="url" value="3"/>' in result
True
